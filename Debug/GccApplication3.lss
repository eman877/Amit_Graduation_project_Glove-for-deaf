
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000066  00800060  000009d2  00000a46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000aac  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000adc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000168  00000000  00000000  00000b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001635  00000000  00000000  00000c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a3f  00000000  00000000  000022b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000dd2  00000000  00000000  00002cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002b4  00000000  00000000  00003ac8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000563  00000000  00000000  00003d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d91  00000000  00000000  000042df  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000118  00000000  00000000  00005070  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ed       	ldi	r30, 0xD2	; 210
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3c       	cpi	r26, 0xC6	; 198
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 54 02 	call	0x4a8	; 0x4a8 <main>
  7a:	0c 94 e7 04 	jmp	0x9ce	; 0x9ce <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_EN>:

void LCD_Write_Num(int num) {
    char buffer[11];
    itoa(num, buffer, 10);
    LCD_Write_Str(buffer);
}
  82:	41 e0       	ldi	r20, 0x01	; 1
  84:	50 e0       	ldi	r21, 0x00	; 0
  86:	62 e0       	ldi	r22, 0x02	; 2
  88:	70 e0       	ldi	r23, 0x00	; 0
  8a:	83 e0       	ldi	r24, 0x03	; 3
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	0e 94 3e 03 	call	0x67c	; 0x67c <setPinData>
  92:	8f e1       	ldi	r24, 0x1F	; 31
  94:	93 e0       	ldi	r25, 0x03	; 3
  96:	01 97       	sbiw	r24, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <LCD_EN+0x14>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <LCD_EN+0x1a>
  9c:	00 00       	nop
  9e:	40 e0       	ldi	r20, 0x00	; 0
  a0:	50 e0       	ldi	r21, 0x00	; 0
  a2:	62 e0       	ldi	r22, 0x02	; 2
  a4:	70 e0       	ldi	r23, 0x00	; 0
  a6:	83 e0       	ldi	r24, 0x03	; 3
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 3e 03 	call	0x67c	; 0x67c <setPinData>
  ae:	08 95       	ret

000000b0 <LCD_DATA>:
  b0:	cf 93       	push	r28
  b2:	c8 2f       	mov	r28, r24
  b4:	41 e0       	ldi	r20, 0x01	; 1
  b6:	50 e0       	ldi	r21, 0x00	; 0
  b8:	60 e0       	ldi	r22, 0x00	; 0
  ba:	70 e0       	ldi	r23, 0x00	; 0
  bc:	83 e0       	ldi	r24, 0x03	; 3
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 3e 03 	call	0x67c	; 0x67c <setPinData>
  c4:	85 b3       	in	r24, 0x15	; 21
  c6:	8f 70       	andi	r24, 0x0F	; 15
  c8:	9c 2f       	mov	r25, r28
  ca:	90 7f       	andi	r25, 0xF0	; 240
  cc:	89 2b       	or	r24, r25
  ce:	85 bb       	out	0x15, r24	; 21
  d0:	0e 94 41 00 	call	0x82	; 0x82 <LCD_EN>
  d4:	8f e3       	ldi	r24, 0x3F	; 63
  d6:	9c e9       	ldi	r25, 0x9C	; 156
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <LCD_DATA+0x28>
  dc:	00 c0       	rjmp	.+0      	; 0xde <LCD_DATA+0x2e>
  de:	00 00       	nop
  e0:	25 b3       	in	r18, 0x15	; 21
  e2:	30 e1       	ldi	r19, 0x10	; 16
  e4:	c3 9f       	mul	r28, r19
  e6:	c0 01       	movw	r24, r0
  e8:	11 24       	eor	r1, r1
  ea:	92 2f       	mov	r25, r18
  ec:	9f 70       	andi	r25, 0x0F	; 15
  ee:	89 2b       	or	r24, r25
  f0:	85 bb       	out	0x15, r24	; 21
  f2:	0e 94 41 00 	call	0x82	; 0x82 <LCD_EN>
  f6:	8f e3       	ldi	r24, 0x3F	; 63
  f8:	9c e9       	ldi	r25, 0x9C	; 156
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <LCD_DATA+0x4a>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <LCD_DATA+0x50>
 100:	00 00       	nop
 102:	cf 91       	pop	r28
 104:	08 95       	ret

00000106 <LCD_CMD>:
 106:	cf 93       	push	r28
 108:	c8 2f       	mov	r28, r24
 10a:	40 e0       	ldi	r20, 0x00	; 0
 10c:	50 e0       	ldi	r21, 0x00	; 0
 10e:	60 e0       	ldi	r22, 0x00	; 0
 110:	70 e0       	ldi	r23, 0x00	; 0
 112:	83 e0       	ldi	r24, 0x03	; 3
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 3e 03 	call	0x67c	; 0x67c <setPinData>
 11a:	85 b3       	in	r24, 0x15	; 21
 11c:	8f 70       	andi	r24, 0x0F	; 15
 11e:	9c 2f       	mov	r25, r28
 120:	90 7f       	andi	r25, 0xF0	; 240
 122:	89 2b       	or	r24, r25
 124:	85 bb       	out	0x15, r24	; 21
 126:	0e 94 41 00 	call	0x82	; 0x82 <LCD_EN>
 12a:	8f e3       	ldi	r24, 0x3F	; 63
 12c:	9c e9       	ldi	r25, 0x9C	; 156
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <LCD_CMD+0x28>
 132:	00 c0       	rjmp	.+0      	; 0x134 <LCD_CMD+0x2e>
 134:	00 00       	nop
 136:	25 b3       	in	r18, 0x15	; 21
 138:	30 e1       	ldi	r19, 0x10	; 16
 13a:	c3 9f       	mul	r28, r19
 13c:	c0 01       	movw	r24, r0
 13e:	11 24       	eor	r1, r1
 140:	92 2f       	mov	r25, r18
 142:	9f 70       	andi	r25, 0x0F	; 15
 144:	89 2b       	or	r24, r25
 146:	85 bb       	out	0x15, r24	; 21
 148:	0e 94 41 00 	call	0x82	; 0x82 <LCD_EN>
 14c:	8f e3       	ldi	r24, 0x3F	; 63
 14e:	9c e9       	ldi	r25, 0x9C	; 156
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <LCD_CMD+0x4a>
 154:	00 c0       	rjmp	.+0      	; 0x156 <LCD_CMD+0x50>
 156:	00 00       	nop
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <LCD_CLEAR>:
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	0e 94 83 00 	call	0x106	; 0x106 <LCD_CMD>
 162:	08 95       	ret

00000164 <init_LCD>:
 164:	84 b3       	in	r24, 0x14	; 20
 166:	80 6f       	ori	r24, 0xF0	; 240
 168:	84 bb       	out	0x14, r24	; 20
 16a:	41 e0       	ldi	r20, 0x01	; 1
 16c:	50 e0       	ldi	r21, 0x00	; 0
 16e:	60 e0       	ldi	r22, 0x00	; 0
 170:	70 e0       	ldi	r23, 0x00	; 0
 172:	83 e0       	ldi	r24, 0x03	; 3
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 c6 02 	call	0x58c	; 0x58c <setPinDir>
 17a:	41 e0       	ldi	r20, 0x01	; 1
 17c:	50 e0       	ldi	r21, 0x00	; 0
 17e:	61 e0       	ldi	r22, 0x01	; 1
 180:	70 e0       	ldi	r23, 0x00	; 0
 182:	83 e0       	ldi	r24, 0x03	; 3
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 c6 02 	call	0x58c	; 0x58c <setPinDir>
 18a:	41 e0       	ldi	r20, 0x01	; 1
 18c:	50 e0       	ldi	r21, 0x00	; 0
 18e:	62 e0       	ldi	r22, 0x02	; 2
 190:	70 e0       	ldi	r23, 0x00	; 0
 192:	83 e0       	ldi	r24, 0x03	; 3
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 c6 02 	call	0x58c	; 0x58c <setPinDir>
 19a:	40 e0       	ldi	r20, 0x00	; 0
 19c:	50 e0       	ldi	r21, 0x00	; 0
 19e:	61 e0       	ldi	r22, 0x01	; 1
 1a0:	70 e0       	ldi	r23, 0x00	; 0
 1a2:	83 e0       	ldi	r24, 0x03	; 3
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 3e 03 	call	0x67c	; 0x67c <setPinData>
 1aa:	82 e0       	ldi	r24, 0x02	; 2
 1ac:	0e 94 83 00 	call	0x106	; 0x106 <LCD_CMD>
 1b0:	88 e2       	ldi	r24, 0x28	; 40
 1b2:	0e 94 83 00 	call	0x106	; 0x106 <LCD_CMD>
 1b6:	8c e0       	ldi	r24, 0x0C	; 12
 1b8:	0e 94 83 00 	call	0x106	; 0x106 <LCD_CMD>
 1bc:	86 e0       	ldi	r24, 0x06	; 6
 1be:	0e 94 83 00 	call	0x106	; 0x106 <LCD_CMD>
 1c2:	0e 94 ae 00 	call	0x15c	; 0x15c <LCD_CLEAR>
 1c6:	2f ef       	ldi	r18, 0xFF	; 255
 1c8:	80 e7       	ldi	r24, 0x70	; 112
 1ca:	92 e0       	ldi	r25, 0x02	; 2
 1cc:	21 50       	subi	r18, 0x01	; 1
 1ce:	80 40       	sbci	r24, 0x00	; 0
 1d0:	90 40       	sbci	r25, 0x00	; 0
 1d2:	e1 f7       	brne	.-8      	; 0x1cc <init_LCD+0x68>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <init_LCD+0x72>
 1d6:	00 00       	nop
 1d8:	08 95       	ret

000001da <LCD_Write_Str>:
 1da:	0f 93       	push	r16
 1dc:	1f 93       	push	r17
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	8c 01       	movw	r16, r24
 1e4:	c0 e0       	ldi	r28, 0x00	; 0
 1e6:	d0 e0       	ldi	r29, 0x00	; 0
 1e8:	03 c0       	rjmp	.+6      	; 0x1f0 <LCD_Write_Str+0x16>
 1ea:	0e 94 58 00 	call	0xb0	; 0xb0 <LCD_DATA>
 1ee:	21 96       	adiw	r28, 0x01	; 1
 1f0:	f8 01       	movw	r30, r16
 1f2:	ec 0f       	add	r30, r28
 1f4:	fd 1f       	adc	r31, r29
 1f6:	80 81       	ld	r24, Z
 1f8:	81 11       	cpse	r24, r1
 1fa:	f7 cf       	rjmp	.-18     	; 0x1ea <LCD_Write_Str+0x10>
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	1f 91       	pop	r17
 202:	0f 91       	pop	r16
 204:	08 95       	ret

00000206 <LCD_goto>:

void LCD_goto(int row, int column) {
    if (row) {
 206:	89 2b       	or	r24, r25
 208:	31 f0       	breq	.+12     	; 0x216 <LCD_goto+0x10>
        // Second Line
        LCD_CMD(0xC0 | (column & 0x0F));
 20a:	86 2f       	mov	r24, r22
 20c:	8f 70       	andi	r24, 0x0F	; 15
 20e:	80 6c       	ori	r24, 0xC0	; 192
 210:	0e 94 83 00 	call	0x106	; 0x106 <LCD_CMD>
 214:	08 95       	ret
    } else {
        // First Line
        LCD_CMD(0x80 | (column & 0x0F));
 216:	86 2f       	mov	r24, r22
 218:	8f 70       	andi	r24, 0x0F	; 15
 21a:	80 68       	ori	r24, 0x80	; 128
 21c:	0e 94 83 00 	call	0x106	; 0x106 <LCD_CMD>
 220:	08 95       	ret

00000222 <Print_Sign>:
#include "ADC.h"
#include "I_O.h"
#include "LCD.h"
#include "Sign.h"

void Print_Sign(int* Result) {
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	cd b7       	in	r28, 0x3d	; 61
 228:	de b7       	in	r29, 0x3e	; 62
 22a:	ca 56       	subi	r28, 0x6A	; 106
 22c:	d1 09       	sbc	r29, r1
 22e:	0f b6       	in	r0, 0x3f	; 63
 230:	f8 94       	cli
 232:	de bf       	out	0x3e, r29	; 62
 234:	0f be       	out	0x3f, r0	; 63
 236:	cd bf       	out	0x3d, r28	; 61

    char str1[] = "I LOVE U";
 238:	29 e0       	ldi	r18, 0x09	; 9
 23a:	e0 e6       	ldi	r30, 0x60	; 96
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	de 01       	movw	r26, r28
 240:	11 96       	adiw	r26, 0x01	; 1
 242:	01 90       	ld	r0, Z+
 244:	0d 92       	st	X+, r0
 246:	2a 95       	dec	r18
 248:	e1 f7       	brne	.-8      	; 0x242 <Print_Sign+0x20>
    char str2[] = "YOU";
 24a:	29 e5       	ldi	r18, 0x59	; 89
 24c:	3f e4       	ldi	r19, 0x4F	; 79
 24e:	3b 87       	std	Y+11, r19	; 0x0b
 250:	2a 87       	std	Y+10, r18	; 0x0a
 252:	25 e5       	ldi	r18, 0x55	; 85
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	3d 87       	std	Y+13, r19	; 0x0d
 258:	2c 87       	std	Y+12, r18	; 0x0c
    char str3[] = "GOOD JOB";
 25a:	29 e0       	ldi	r18, 0x09	; 9
 25c:	e9 e6       	ldi	r30, 0x69	; 105
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	de 01       	movw	r26, r28
 262:	1e 96       	adiw	r26, 0x0e	; 14
 264:	01 90       	ld	r0, Z+
 266:	0d 92       	st	X+, r0
 268:	2a 95       	dec	r18
 26a:	e1 f7       	brne	.-8      	; 0x264 <Print_Sign+0x42>
    char str4[] = "THIS IS TERRIBLE";
 26c:	21 e1       	ldi	r18, 0x11	; 17
 26e:	e2 e7       	ldi	r30, 0x72	; 114
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	de 01       	movw	r26, r28
 274:	57 96       	adiw	r26, 0x17	; 23
 276:	01 90       	ld	r0, Z+
 278:	0d 92       	st	X+, r0
 27a:	2a 95       	dec	r18
 27c:	e1 f7       	brne	.-8      	; 0x276 <Print_Sign+0x54>
    char str5[] = "WISH U A HAPPY";
 27e:	2f e0       	ldi	r18, 0x0F	; 15
 280:	e3 e8       	ldi	r30, 0x83	; 131
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	de 01       	movw	r26, r28
 286:	98 96       	adiw	r26, 0x28	; 40
 288:	01 90       	ld	r0, Z+
 28a:	0d 92       	st	X+, r0
 28c:	2a 95       	dec	r18
 28e:	e1 f7       	brne	.-8      	; 0x288 <Print_Sign+0x66>
    char str51[] = "LIFE";
 290:	25 e0       	ldi	r18, 0x05	; 5
 292:	e2 e9       	ldi	r30, 0x92	; 146
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	de 01       	movw	r26, r28
 298:	d7 96       	adiw	r26, 0x37	; 55
 29a:	01 90       	ld	r0, Z+
 29c:	0d 92       	st	X+, r0
 29e:	2a 95       	dec	r18
 2a0:	e1 f7       	brne	.-8      	; 0x29a <Print_Sign+0x78>
    char str6[] = "I'M WATCHING U";
 2a2:	2f e0       	ldi	r18, 0x0F	; 15
 2a4:	e7 e9       	ldi	r30, 0x97	; 151
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	de 01       	movw	r26, r28
 2aa:	dc 96       	adiw	r26, 0x3c	; 60
 2ac:	01 90       	ld	r0, Z+
 2ae:	0d 92       	st	X+, r0
 2b0:	2a 95       	dec	r18
 2b2:	e1 f7       	brne	.-8      	; 0x2ac <Print_Sign+0x8a>
    char str7[] = "I REALLY LOVE U";
 2b4:	20 e1       	ldi	r18, 0x10	; 16
 2b6:	e6 ea       	ldi	r30, 0xA6	; 166
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	de 01       	movw	r26, r28
 2bc:	a5 5b       	subi	r26, 0xB5	; 181
 2be:	bf 4f       	sbci	r27, 0xFF	; 255
 2c0:	01 90       	ld	r0, Z+
 2c2:	0d 92       	st	X+, r0
 2c4:	2a 95       	dec	r18
 2c6:	e1 f7       	brne	.-8      	; 0x2c0 <Print_Sign+0x9e>
    char str8[] = "CAN'T FIND WORD";
 2c8:	20 e1       	ldi	r18, 0x10	; 16
 2ca:	e6 eb       	ldi	r30, 0xB6	; 182
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	de 01       	movw	r26, r28
 2d0:	a5 5a       	subi	r26, 0xA5	; 165
 2d2:	bf 4f       	sbci	r27, 0xFF	; 255
 2d4:	01 90       	ld	r0, Z+
 2d6:	0d 92       	st	X+, r0
 2d8:	2a 95       	dec	r18
 2da:	e1 f7       	brne	.-8      	; 0x2d4 <Print_Sign+0xb2>
    if ((Result[0] == 4) && (Result[1] == 4) &&(Result[2] == 2)&&(Result[3] == 2) &&(Result[4] == 4)) {
 2dc:	fc 01       	movw	r30, r24
 2de:	20 81       	ld	r18, Z
 2e0:	31 81       	ldd	r19, Z+1	; 0x01
 2e2:	24 30       	cpi	r18, 0x04	; 4
 2e4:	31 05       	cpc	r19, r1
 2e6:	c9 f4       	brne	.+50     	; 0x31a <Print_Sign+0xf8>
 2e8:	42 81       	ldd	r20, Z+2	; 0x02
 2ea:	53 81       	ldd	r21, Z+3	; 0x03
 2ec:	44 30       	cpi	r20, 0x04	; 4
 2ee:	51 05       	cpc	r21, r1
 2f0:	a1 f4       	brne	.+40     	; 0x31a <Print_Sign+0xf8>
 2f2:	44 81       	ldd	r20, Z+4	; 0x04
 2f4:	55 81       	ldd	r21, Z+5	; 0x05
 2f6:	42 30       	cpi	r20, 0x02	; 2
 2f8:	51 05       	cpc	r21, r1
 2fa:	79 f4       	brne	.+30     	; 0x31a <Print_Sign+0xf8>
 2fc:	46 81       	ldd	r20, Z+6	; 0x06
 2fe:	57 81       	ldd	r21, Z+7	; 0x07
 300:	42 30       	cpi	r20, 0x02	; 2
 302:	51 05       	cpc	r21, r1
 304:	51 f4       	brne	.+20     	; 0x31a <Print_Sign+0xf8>
 306:	40 85       	ldd	r20, Z+8	; 0x08
 308:	51 85       	ldd	r21, Z+9	; 0x09
 30a:	44 30       	cpi	r20, 0x04	; 4
 30c:	51 05       	cpc	r21, r1
 30e:	29 f4       	brne	.+10     	; 0x31a <Print_Sign+0xf8>
        LCD_Write_Str(str1);
 310:	ce 01       	movw	r24, r28
 312:	01 96       	adiw	r24, 0x01	; 1
 314:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_Write_Str>
 318:	bd c0       	rjmp	.+378    	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
    } else if ((Result[0] == 2) && (Result[1] == 4) &&(Result[2] == 2)&&(Result[3] == 2) &&(Result[4] == 2)) {
 31a:	22 30       	cpi	r18, 0x02	; 2
 31c:	31 05       	cpc	r19, r1
 31e:	d1 f4       	brne	.+52     	; 0x354 <Print_Sign+0x132>
 320:	fc 01       	movw	r30, r24
 322:	42 81       	ldd	r20, Z+2	; 0x02
 324:	53 81       	ldd	r21, Z+3	; 0x03
 326:	44 30       	cpi	r20, 0x04	; 4
 328:	51 05       	cpc	r21, r1
 32a:	a1 f4       	brne	.+40     	; 0x354 <Print_Sign+0x132>
 32c:	44 81       	ldd	r20, Z+4	; 0x04
 32e:	55 81       	ldd	r21, Z+5	; 0x05
 330:	42 30       	cpi	r20, 0x02	; 2
 332:	51 05       	cpc	r21, r1
 334:	79 f4       	brne	.+30     	; 0x354 <Print_Sign+0x132>
 336:	46 81       	ldd	r20, Z+6	; 0x06
 338:	57 81       	ldd	r21, Z+7	; 0x07
 33a:	42 30       	cpi	r20, 0x02	; 2
 33c:	51 05       	cpc	r21, r1
 33e:	51 f4       	brne	.+20     	; 0x354 <Print_Sign+0x132>
 340:	40 85       	ldd	r20, Z+8	; 0x08
 342:	51 85       	ldd	r21, Z+9	; 0x09
 344:	42 30       	cpi	r20, 0x02	; 2
 346:	51 05       	cpc	r21, r1
 348:	29 f4       	brne	.+10     	; 0x354 <Print_Sign+0x132>
        LCD_Write_Str(str2);
 34a:	ce 01       	movw	r24, r28
 34c:	0a 96       	adiw	r24, 0x0a	; 10
 34e:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_Write_Str>
 352:	a0 c0       	rjmp	.+320    	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>

    } else if ((Result[0] == 4) && (Result[1] == 2) &&(Result[2] == 2)&&(Result[3] == 2) &&(Result[4] == 2)) {
 354:	24 30       	cpi	r18, 0x04	; 4
 356:	31 05       	cpc	r19, r1
 358:	d1 f4       	brne	.+52     	; 0x38e <Print_Sign+0x16c>
 35a:	fc 01       	movw	r30, r24
 35c:	42 81       	ldd	r20, Z+2	; 0x02
 35e:	53 81       	ldd	r21, Z+3	; 0x03
 360:	42 30       	cpi	r20, 0x02	; 2
 362:	51 05       	cpc	r21, r1
 364:	a1 f4       	brne	.+40     	; 0x38e <Print_Sign+0x16c>
 366:	44 81       	ldd	r20, Z+4	; 0x04
 368:	55 81       	ldd	r21, Z+5	; 0x05
 36a:	42 30       	cpi	r20, 0x02	; 2
 36c:	51 05       	cpc	r21, r1
 36e:	79 f4       	brne	.+30     	; 0x38e <Print_Sign+0x16c>
 370:	46 81       	ldd	r20, Z+6	; 0x06
 372:	57 81       	ldd	r21, Z+7	; 0x07
 374:	42 30       	cpi	r20, 0x02	; 2
 376:	51 05       	cpc	r21, r1
 378:	51 f4       	brne	.+20     	; 0x38e <Print_Sign+0x16c>
 37a:	40 85       	ldd	r20, Z+8	; 0x08
 37c:	51 85       	ldd	r21, Z+9	; 0x09
 37e:	42 30       	cpi	r20, 0x02	; 2
 380:	51 05       	cpc	r21, r1
 382:	29 f4       	brne	.+10     	; 0x38e <Print_Sign+0x16c>
        LCD_Write_Str(str3);
 384:	ce 01       	movw	r24, r28
 386:	0e 96       	adiw	r24, 0x0e	; 14
 388:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_Write_Str>
 38c:	83 c0       	rjmp	.+262    	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>

    } else if ((Result[0] == 2) && (Result[1] == 4) &&(Result[2] == 2)&&(Result[3] == 2) &&(Result[4] == 4)) {
 38e:	22 30       	cpi	r18, 0x02	; 2
 390:	31 05       	cpc	r19, r1
 392:	d1 f4       	brne	.+52     	; 0x3c8 <Print_Sign+0x1a6>
 394:	fc 01       	movw	r30, r24
 396:	42 81       	ldd	r20, Z+2	; 0x02
 398:	53 81       	ldd	r21, Z+3	; 0x03
 39a:	44 30       	cpi	r20, 0x04	; 4
 39c:	51 05       	cpc	r21, r1
 39e:	a1 f4       	brne	.+40     	; 0x3c8 <Print_Sign+0x1a6>
 3a0:	44 81       	ldd	r20, Z+4	; 0x04
 3a2:	55 81       	ldd	r21, Z+5	; 0x05
 3a4:	42 30       	cpi	r20, 0x02	; 2
 3a6:	51 05       	cpc	r21, r1
 3a8:	79 f4       	brne	.+30     	; 0x3c8 <Print_Sign+0x1a6>
 3aa:	46 81       	ldd	r20, Z+6	; 0x06
 3ac:	57 81       	ldd	r21, Z+7	; 0x07
 3ae:	42 30       	cpi	r20, 0x02	; 2
 3b0:	51 05       	cpc	r21, r1
 3b2:	51 f4       	brne	.+20     	; 0x3c8 <Print_Sign+0x1a6>
 3b4:	40 85       	ldd	r20, Z+8	; 0x08
 3b6:	51 85       	ldd	r21, Z+9	; 0x09
 3b8:	44 30       	cpi	r20, 0x04	; 4
 3ba:	51 05       	cpc	r21, r1
 3bc:	29 f4       	brne	.+10     	; 0x3c8 <Print_Sign+0x1a6>
        LCD_Write_Str(str4);
 3be:	ce 01       	movw	r24, r28
 3c0:	47 96       	adiw	r24, 0x17	; 23
 3c2:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_Write_Str>
 3c6:	66 c0       	rjmp	.+204    	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>

    } else if ((Result[0] == 4) && (Result[1] == 4) &&(Result[2] == 4)&&(Result[3] == 4) &&(Result[4] == 4)) {
 3c8:	24 30       	cpi	r18, 0x04	; 4
 3ca:	31 05       	cpc	r19, r1
 3cc:	21 f5       	brne	.+72     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 3ce:	fc 01       	movw	r30, r24
 3d0:	42 81       	ldd	r20, Z+2	; 0x02
 3d2:	53 81       	ldd	r21, Z+3	; 0x03
 3d4:	44 30       	cpi	r20, 0x04	; 4
 3d6:	51 05       	cpc	r21, r1
 3d8:	f1 f4       	brne	.+60     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 3da:	44 81       	ldd	r20, Z+4	; 0x04
 3dc:	55 81       	ldd	r21, Z+5	; 0x05
 3de:	44 30       	cpi	r20, 0x04	; 4
 3e0:	51 05       	cpc	r21, r1
 3e2:	c9 f4       	brne	.+50     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 3e4:	46 81       	ldd	r20, Z+6	; 0x06
 3e6:	57 81       	ldd	r21, Z+7	; 0x07
 3e8:	44 30       	cpi	r20, 0x04	; 4
 3ea:	51 05       	cpc	r21, r1
 3ec:	a1 f4       	brne	.+40     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 3ee:	40 85       	ldd	r20, Z+8	; 0x08
 3f0:	51 85       	ldd	r21, Z+9	; 0x09
 3f2:	44 30       	cpi	r20, 0x04	; 4
 3f4:	51 05       	cpc	r21, r1
 3f6:	79 f4       	brne	.+30     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
        LCD_Write_Str(str5);
 3f8:	ce 01       	movw	r24, r28
 3fa:	88 96       	adiw	r24, 0x28	; 40
 3fc:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_Write_Str>
        LCD_goto(row1, column5);
 400:	65 e0       	ldi	r22, 0x05	; 5
 402:	70 e0       	ldi	r23, 0x00	; 0
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	0e 94 03 01 	call	0x206	; 0x206 <LCD_goto>
        LCD_Write_Str(str51);
 40c:	ce 01       	movw	r24, r28
 40e:	c7 96       	adiw	r24, 0x37	; 55
 410:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_Write_Str>
 414:	3f c0       	rjmp	.+126    	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>

    } else if ((Result[0] == 2) && (Result[1] == 3) &&(Result[2] == 3)&&(Result[3] == 2) &&(Result[4] == 2)) {
 416:	22 30       	cpi	r18, 0x02	; 2
 418:	31 05       	cpc	r19, r1
 41a:	d1 f4       	brne	.+52     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 41c:	fc 01       	movw	r30, r24
 41e:	42 81       	ldd	r20, Z+2	; 0x02
 420:	53 81       	ldd	r21, Z+3	; 0x03
 422:	43 30       	cpi	r20, 0x03	; 3
 424:	51 05       	cpc	r21, r1
 426:	a1 f4       	brne	.+40     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 428:	44 81       	ldd	r20, Z+4	; 0x04
 42a:	55 81       	ldd	r21, Z+5	; 0x05
 42c:	43 30       	cpi	r20, 0x03	; 3
 42e:	51 05       	cpc	r21, r1
 430:	79 f4       	brne	.+30     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 432:	46 81       	ldd	r20, Z+6	; 0x06
 434:	57 81       	ldd	r21, Z+7	; 0x07
 436:	42 30       	cpi	r20, 0x02	; 2
 438:	51 05       	cpc	r21, r1
 43a:	51 f4       	brne	.+20     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 43c:	40 85       	ldd	r20, Z+8	; 0x08
 43e:	51 85       	ldd	r21, Z+9	; 0x09
 440:	42 30       	cpi	r20, 0x02	; 2
 442:	51 05       	cpc	r21, r1
 444:	29 f4       	brne	.+10     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
        LCD_Write_Str(str6);
 446:	ce 01       	movw	r24, r28
 448:	cc 96       	adiw	r24, 0x3c	; 60
 44a:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_Write_Str>
 44e:	22 c0       	rjmp	.+68     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>

    } else if ((Result[0] == 4) && (Result[1] == 3) &&(Result[2] == 4)&&(Result[3] == 2) &&(Result[4] == 4)) {
 450:	24 30       	cpi	r18, 0x04	; 4
 452:	31 05       	cpc	r19, r1
 454:	d1 f4       	brne	.+52     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 456:	fc 01       	movw	r30, r24
 458:	22 81       	ldd	r18, Z+2	; 0x02
 45a:	33 81       	ldd	r19, Z+3	; 0x03
 45c:	23 30       	cpi	r18, 0x03	; 3
 45e:	31 05       	cpc	r19, r1
 460:	a1 f4       	brne	.+40     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 462:	24 81       	ldd	r18, Z+4	; 0x04
 464:	35 81       	ldd	r19, Z+5	; 0x05
 466:	24 30       	cpi	r18, 0x04	; 4
 468:	31 05       	cpc	r19, r1
 46a:	79 f4       	brne	.+30     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 46c:	26 81       	ldd	r18, Z+6	; 0x06
 46e:	37 81       	ldd	r19, Z+7	; 0x07
 470:	22 30       	cpi	r18, 0x02	; 2
 472:	31 05       	cpc	r19, r1
 474:	51 f4       	brne	.+20     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 476:	80 85       	ldd	r24, Z+8	; 0x08
 478:	91 85       	ldd	r25, Z+9	; 0x09
 47a:	04 97       	sbiw	r24, 0x04	; 4
 47c:	31 f4       	brne	.+12     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
        LCD_Write_Str(str7);
 47e:	ce 01       	movw	r24, r28
 480:	85 5b       	subi	r24, 0xB5	; 181
 482:	9f 4f       	sbci	r25, 0xFF	; 255
 484:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_Write_Str>
 488:	05 c0       	rjmp	.+10     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
    } else {
        LCD_Write_Str(str8);
 48a:	ce 01       	movw	r24, r28
 48c:	85 5a       	subi	r24, 0xA5	; 165
 48e:	9f 4f       	sbci	r25, 0xFF	; 255
 490:	0e 94 ed 00 	call	0x1da	; 0x1da <LCD_Write_Str>

    }
}
 494:	c6 59       	subi	r28, 0x96	; 150
 496:	df 4f       	sbci	r29, 0xFF	; 255
 498:	0f b6       	in	r0, 0x3f	; 63
 49a:	f8 94       	cli
 49c:	de bf       	out	0x3e, r29	; 62
 49e:	0f be       	out	0x3f, r0	; 63
 4a0:	cd bf       	out	0x3d, r28	; 61
 4a2:	df 91       	pop	r29
 4a4:	cf 91       	pop	r28
 4a6:	08 95       	ret

000004a8 <main>:
#include "I_O.h"
#include "LCD.h"
#include "SIGN.h"
#include <avr/interrupt.h>

int main() {
 4a8:	cf 93       	push	r28
 4aa:	df 93       	push	r29
 4ac:	cd b7       	in	r28, 0x3d	; 61
 4ae:	de b7       	in	r29, 0x3e	; 62
 4b0:	2a 97       	sbiw	r28, 0x0a	; 10
 4b2:	0f b6       	in	r0, 0x3f	; 63
 4b4:	f8 94       	cli
 4b6:	de bf       	out	0x3e, r29	; 62
 4b8:	0f be       	out	0x3f, r0	; 63
 4ba:	cd bf       	out	0x3d, r28	; 61
    init_LCD();
 4bc:	0e 94 b2 00 	call	0x164	; 0x164 <init_LCD>
    init_ADC(AREF, PRE_128);
 4c0:	67 e0       	ldi	r22, 0x07	; 7
 4c2:	70 e0       	ldi	r23, 0x00	; 0
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	0e 94 9f 02 	call	0x53e	; 0x53e <init_ADC>
    int Results[5];

    while (1) {

        for (int ChannelNumber = 0; ChannelNumber < 5; ChannelNumber++) {
 4cc:	00 e0       	ldi	r16, 0x00	; 0
 4ce:	10 e0       	ldi	r17, 0x00	; 0
 4d0:	23 c0       	rjmp	.+70     	; 0x518 <main+0x70>
            ///Sweeping 5 Channels For Readings
            ADC_Channel_Select(ChannelNumber);
 4d2:	c8 01       	movw	r24, r16
 4d4:	0e 94 b2 02 	call	0x564	; 0x564 <ADC_Channel_Select>
            ADC_StartConv();
 4d8:	0e 94 b9 02 	call	0x572	; 0x572 <ADC_StartConv>
            ///TMAPPING POT TO FINGERS MOVEMENS(4v FOR FLAT POSITION ,2v FOR 90BEND & 3v FOR 45BEND)
            Results[ChannelNumber] = ADC_read()*.00488;//convert to actual voltage
 4dc:	0e 94 bd 02 	call	0x57a	; 0x57a <ADC_read>
 4e0:	bc 01       	movw	r22, r24
 4e2:	99 0f       	add	r25, r25
 4e4:	88 0b       	sbc	r24, r24
 4e6:	99 0b       	sbc	r25, r25
 4e8:	0e 94 ee 03 	call	0x7dc	; 0x7dc <__floatsisf>
 4ec:	28 e6       	ldi	r18, 0x68	; 104
 4ee:	38 ee       	ldi	r19, 0xE8	; 232
 4f0:	4f e9       	ldi	r20, 0x9F	; 159
 4f2:	5b e3       	ldi	r21, 0x3B	; 59
 4f4:	0e 94 52 04 	call	0x8a4	; 0x8a4 <__mulsf3>
 4f8:	78 01       	movw	r14, r16
 4fa:	ee 0c       	add	r14, r14
 4fc:	ff 1c       	adc	r15, r15
 4fe:	21 e0       	ldi	r18, 0x01	; 1
 500:	30 e0       	ldi	r19, 0x00	; 0
 502:	2c 0f       	add	r18, r28
 504:	3d 1f       	adc	r19, r29
 506:	e2 0e       	add	r14, r18
 508:	f3 1e       	adc	r15, r19
 50a:	0e 94 b6 03 	call	0x76c	; 0x76c <__fixsfsi>
 50e:	f7 01       	movw	r30, r14
 510:	71 83       	std	Z+1, r23	; 0x01
 512:	60 83       	st	Z, r22
    init_ADC(AREF, PRE_128);
    int Results[5];

    while (1) {

        for (int ChannelNumber = 0; ChannelNumber < 5; ChannelNumber++) {
 514:	0f 5f       	subi	r16, 0xFF	; 255
 516:	1f 4f       	sbci	r17, 0xFF	; 255
 518:	05 30       	cpi	r16, 0x05	; 5
 51a:	11 05       	cpc	r17, r1
 51c:	d4 f2       	brlt	.-76     	; 0x4d2 <main+0x2a>
            ADC_StartConv();
            ///TMAPPING POT TO FINGERS MOVEMENS(4v FOR FLAT POSITION ,2v FOR 90BEND & 3v FOR 45BEND)
            Results[ChannelNumber] = ADC_read()*.00488;//convert to actual voltage
        }

        LCD_CLEAR();
 51e:	0e 94 ae 00 	call	0x15c	; 0x15c <LCD_CLEAR>
        Print_Sign(Results);
 522:	ce 01       	movw	r24, r28
 524:	01 96       	adiw	r24, 0x01	; 1
 526:	0e 94 11 01 	call	0x222	; 0x222 <Print_Sign>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 52a:	ff ef       	ldi	r31, 0xFF	; 255
 52c:	25 ea       	ldi	r18, 0xA5	; 165
 52e:	3e e0       	ldi	r19, 0x0E	; 14
 530:	f1 50       	subi	r31, 0x01	; 1
 532:	20 40       	sbci	r18, 0x00	; 0
 534:	30 40       	sbci	r19, 0x00	; 0
 536:	e1 f7       	brne	.-8      	; 0x530 <main+0x88>
 538:	00 c0       	rjmp	.+0      	; 0x53a <main+0x92>
 53a:	00 00       	nop
 53c:	c7 cf       	rjmp	.-114    	; 0x4cc <main+0x24>

0000053e <init_ADC>:
#include "ADC.h"
#include <avr/io.h>

void init_ADC(int ref, int prescaler)
{
    ADMUX |= (ref << REFS0);
 53e:	27 b1       	in	r18, 0x07	; 7
 540:	00 24       	eor	r0, r0
 542:	96 95       	lsr	r25
 544:	87 95       	ror	r24
 546:	07 94       	ror	r0
 548:	96 95       	lsr	r25
 54a:	87 95       	ror	r24
 54c:	07 94       	ror	r0
 54e:	98 2f       	mov	r25, r24
 550:	80 2d       	mov	r24, r0
 552:	82 2b       	or	r24, r18
 554:	87 b9       	out	0x07, r24	; 7
    ADCSRA |= (prescaler << ADPS0);
 556:	86 b1       	in	r24, 0x06	; 6
 558:	68 2b       	or	r22, r24
 55a:	66 b9       	out	0x06, r22	; 6
    ADCSRA |= (1 << ADEN);
 55c:	86 b1       	in	r24, 0x06	; 6
 55e:	80 68       	ori	r24, 0x80	; 128
 560:	86 b9       	out	0x06, r24	; 6
 562:	08 95       	ret

00000564 <ADC_Channel_Select>:
}

void ADC_Channel_Select(int ch)
{
    ADMUX &= ~(0x1F);
 564:	97 b1       	in	r25, 0x07	; 7
 566:	90 7e       	andi	r25, 0xE0	; 224
 568:	97 b9       	out	0x07, r25	; 7
    ADMUX |= (ch);
 56a:	97 b1       	in	r25, 0x07	; 7
 56c:	89 2b       	or	r24, r25
 56e:	87 b9       	out	0x07, r24	; 7
 570:	08 95       	ret

00000572 <ADC_StartConv>:
}

void ADC_StartConv() 
{
    ADCSRA |= (1 << ADSC);
 572:	86 b1       	in	r24, 0x06	; 6
 574:	80 64       	ori	r24, 0x40	; 64
 576:	86 b9       	out	0x06, r24	; 6
 578:	08 95       	ret

0000057a <ADC_read>:
}

int ADC_read()
{
    while (!(ADCSRA & (1 << ADIF)));
 57a:	34 9b       	sbis	0x06, 4	; 6
 57c:	fe cf       	rjmp	.-4      	; 0x57a <ADC_read>
    int data = ADCL;
 57e:	24 b1       	in	r18, 0x04	; 4
    data |= (ADCH << 8) | data;
 580:	85 b1       	in	r24, 0x05	; 5
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	98 2f       	mov	r25, r24
 586:	88 27       	eor	r24, r24
    return data;
}
 588:	82 2b       	or	r24, r18
 58a:	08 95       	ret

0000058c <setPinDir>:
}
// Pin Level

void setPinDir(int portNum, int pinNum, int state) 
{
    if (state) 
 58c:	45 2b       	or	r20, r21
 58e:	c9 f1       	breq	.+114    	; 0x602 <setPinDir+0x76>
    {
        switch (portNum)
 590:	81 30       	cpi	r24, 0x01	; 1
 592:	91 05       	cpc	r25, r1
 594:	a9 f0       	breq	.+42     	; 0x5c0 <setPinDir+0x34>
 596:	1c f4       	brge	.+6      	; 0x59e <setPinDir+0x12>
 598:	89 2b       	or	r24, r25
 59a:	39 f0       	breq	.+14     	; 0x5aa <setPinDir+0x1e>
 59c:	08 95       	ret
 59e:	82 30       	cpi	r24, 0x02	; 2
 5a0:	91 05       	cpc	r25, r1
 5a2:	c9 f0       	breq	.+50     	; 0x5d6 <setPinDir+0x4a>
 5a4:	03 97       	sbiw	r24, 0x03	; 3
 5a6:	11 f1       	breq	.+68     	; 0x5ec <setPinDir+0x60>
 5a8:	08 95       	ret
        {
            case _PA:
                DDRA |= (1 << pinNum);
 5aa:	2a b3       	in	r18, 0x1a	; 26
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <setPinDir+0x2a>
 5b2:	88 0f       	add	r24, r24
 5b4:	99 1f       	adc	r25, r25
 5b6:	6a 95       	dec	r22
 5b8:	e2 f7       	brpl	.-8      	; 0x5b2 <setPinDir+0x26>
 5ba:	82 2b       	or	r24, r18
 5bc:	8a bb       	out	0x1a, r24	; 26
                break;
 5be:	08 95       	ret
            case _PB:
                DDRB |= (1 << pinNum);
 5c0:	27 b3       	in	r18, 0x17	; 23
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <setPinDir+0x40>
 5c8:	88 0f       	add	r24, r24
 5ca:	99 1f       	adc	r25, r25
 5cc:	6a 95       	dec	r22
 5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <setPinDir+0x3c>
 5d0:	82 2b       	or	r24, r18
 5d2:	87 bb       	out	0x17, r24	; 23
                break;
 5d4:	08 95       	ret
            case _PC:
                DDRC |= (1 << pinNum);
 5d6:	24 b3       	in	r18, 0x14	; 20
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <setPinDir+0x56>
 5de:	88 0f       	add	r24, r24
 5e0:	99 1f       	adc	r25, r25
 5e2:	6a 95       	dec	r22
 5e4:	e2 f7       	brpl	.-8      	; 0x5de <setPinDir+0x52>
 5e6:	82 2b       	or	r24, r18
 5e8:	84 bb       	out	0x14, r24	; 20
                break;
 5ea:	08 95       	ret
            case _PD:
                DDRD |= (1 << pinNum);
 5ec:	21 b3       	in	r18, 0x11	; 17
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <setPinDir+0x6c>
 5f4:	88 0f       	add	r24, r24
 5f6:	99 1f       	adc	r25, r25
 5f8:	6a 95       	dec	r22
 5fa:	e2 f7       	brpl	.-8      	; 0x5f4 <setPinDir+0x68>
 5fc:	82 2b       	or	r24, r18
 5fe:	81 bb       	out	0x11, r24	; 17
                break;
 600:	08 95       	ret
        }
    } 
    else 
    {
        switch (portNum) 
 602:	81 30       	cpi	r24, 0x01	; 1
 604:	91 05       	cpc	r25, r1
 606:	b1 f0       	breq	.+44     	; 0x634 <setPinDir+0xa8>
 608:	1c f4       	brge	.+6      	; 0x610 <setPinDir+0x84>
 60a:	89 2b       	or	r24, r25
 60c:	39 f0       	breq	.+14     	; 0x61c <setPinDir+0x90>
 60e:	08 95       	ret
 610:	82 30       	cpi	r24, 0x02	; 2
 612:	91 05       	cpc	r25, r1
 614:	d9 f0       	breq	.+54     	; 0x64c <setPinDir+0xc0>
 616:	03 97       	sbiw	r24, 0x03	; 3
 618:	29 f1       	breq	.+74     	; 0x664 <setPinDir+0xd8>
 61a:	08 95       	ret
        {
            case _PA:
                DDRA &= ~(1 << pinNum);
 61c:	2a b3       	in	r18, 0x1a	; 26
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	02 c0       	rjmp	.+4      	; 0x628 <setPinDir+0x9c>
 624:	88 0f       	add	r24, r24
 626:	99 1f       	adc	r25, r25
 628:	6a 95       	dec	r22
 62a:	e2 f7       	brpl	.-8      	; 0x624 <setPinDir+0x98>
 62c:	80 95       	com	r24
 62e:	82 23       	and	r24, r18
 630:	8a bb       	out	0x1a, r24	; 26
                break;
 632:	08 95       	ret
            case _PB:
                DDRB &= ~(1 << pinNum);
 634:	27 b3       	in	r18, 0x17	; 23
 636:	81 e0       	ldi	r24, 0x01	; 1
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	02 c0       	rjmp	.+4      	; 0x640 <setPinDir+0xb4>
 63c:	88 0f       	add	r24, r24
 63e:	99 1f       	adc	r25, r25
 640:	6a 95       	dec	r22
 642:	e2 f7       	brpl	.-8      	; 0x63c <setPinDir+0xb0>
 644:	80 95       	com	r24
 646:	82 23       	and	r24, r18
 648:	87 bb       	out	0x17, r24	; 23
                break;
 64a:	08 95       	ret
            case _PC:
                DDRC &= ~(1 << pinNum);
 64c:	24 b3       	in	r18, 0x14	; 20
 64e:	81 e0       	ldi	r24, 0x01	; 1
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	02 c0       	rjmp	.+4      	; 0x658 <setPinDir+0xcc>
 654:	88 0f       	add	r24, r24
 656:	99 1f       	adc	r25, r25
 658:	6a 95       	dec	r22
 65a:	e2 f7       	brpl	.-8      	; 0x654 <setPinDir+0xc8>
 65c:	80 95       	com	r24
 65e:	82 23       	and	r24, r18
 660:	84 bb       	out	0x14, r24	; 20
                break;
 662:	08 95       	ret
            case _PD:
                DDRD &= ~(1 << pinNum);
 664:	21 b3       	in	r18, 0x11	; 17
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	02 c0       	rjmp	.+4      	; 0x670 <setPinDir+0xe4>
 66c:	88 0f       	add	r24, r24
 66e:	99 1f       	adc	r25, r25
 670:	6a 95       	dec	r22
 672:	e2 f7       	brpl	.-8      	; 0x66c <setPinDir+0xe0>
 674:	80 95       	com	r24
 676:	82 23       	and	r24, r18
 678:	81 bb       	out	0x11, r24	; 17
 67a:	08 95       	ret

0000067c <setPinData>:
    }
}

void setPinData(int portNum, int pinNum, int data) 
{
    if (data) 
 67c:	45 2b       	or	r20, r21
 67e:	c9 f1       	breq	.+114    	; 0x6f2 <setPinData+0x76>
    {
        switch (portNum) 
 680:	81 30       	cpi	r24, 0x01	; 1
 682:	91 05       	cpc	r25, r1
 684:	a9 f0       	breq	.+42     	; 0x6b0 <setPinData+0x34>
 686:	1c f4       	brge	.+6      	; 0x68e <setPinData+0x12>
 688:	89 2b       	or	r24, r25
 68a:	39 f0       	breq	.+14     	; 0x69a <setPinData+0x1e>
 68c:	08 95       	ret
 68e:	82 30       	cpi	r24, 0x02	; 2
 690:	91 05       	cpc	r25, r1
 692:	c9 f0       	breq	.+50     	; 0x6c6 <setPinData+0x4a>
 694:	03 97       	sbiw	r24, 0x03	; 3
 696:	11 f1       	breq	.+68     	; 0x6dc <setPinData+0x60>
 698:	08 95       	ret
        {
            case _PA:
                PORTA |= (1 << pinNum);
 69a:	2b b3       	in	r18, 0x1b	; 27
 69c:	81 e0       	ldi	r24, 0x01	; 1
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <setPinData+0x2a>
 6a2:	88 0f       	add	r24, r24
 6a4:	99 1f       	adc	r25, r25
 6a6:	6a 95       	dec	r22
 6a8:	e2 f7       	brpl	.-8      	; 0x6a2 <setPinData+0x26>
 6aa:	82 2b       	or	r24, r18
 6ac:	8b bb       	out	0x1b, r24	; 27
                break;
 6ae:	08 95       	ret
            case _PB:
                PORTB |= (1 << pinNum);
 6b0:	28 b3       	in	r18, 0x18	; 24
 6b2:	81 e0       	ldi	r24, 0x01	; 1
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	02 c0       	rjmp	.+4      	; 0x6bc <setPinData+0x40>
 6b8:	88 0f       	add	r24, r24
 6ba:	99 1f       	adc	r25, r25
 6bc:	6a 95       	dec	r22
 6be:	e2 f7       	brpl	.-8      	; 0x6b8 <setPinData+0x3c>
 6c0:	82 2b       	or	r24, r18
 6c2:	88 bb       	out	0x18, r24	; 24
                break;
 6c4:	08 95       	ret
            case _PC:
                PORTC |= (1 << pinNum);
 6c6:	25 b3       	in	r18, 0x15	; 21
 6c8:	81 e0       	ldi	r24, 0x01	; 1
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <setPinData+0x56>
 6ce:	88 0f       	add	r24, r24
 6d0:	99 1f       	adc	r25, r25
 6d2:	6a 95       	dec	r22
 6d4:	e2 f7       	brpl	.-8      	; 0x6ce <setPinData+0x52>
 6d6:	82 2b       	or	r24, r18
 6d8:	85 bb       	out	0x15, r24	; 21
                break;
 6da:	08 95       	ret
            case _PD:
                PORTD |= (1 << pinNum);
 6dc:	22 b3       	in	r18, 0x12	; 18
 6de:	81 e0       	ldi	r24, 0x01	; 1
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	02 c0       	rjmp	.+4      	; 0x6e8 <setPinData+0x6c>
 6e4:	88 0f       	add	r24, r24
 6e6:	99 1f       	adc	r25, r25
 6e8:	6a 95       	dec	r22
 6ea:	e2 f7       	brpl	.-8      	; 0x6e4 <setPinData+0x68>
 6ec:	82 2b       	or	r24, r18
 6ee:	82 bb       	out	0x12, r24	; 18
                break;
 6f0:	08 95       	ret
        }
    } 
    else 
    {
        switch (portNum) 
 6f2:	81 30       	cpi	r24, 0x01	; 1
 6f4:	91 05       	cpc	r25, r1
 6f6:	b1 f0       	breq	.+44     	; 0x724 <setPinData+0xa8>
 6f8:	1c f4       	brge	.+6      	; 0x700 <setPinData+0x84>
 6fa:	89 2b       	or	r24, r25
 6fc:	39 f0       	breq	.+14     	; 0x70c <setPinData+0x90>
 6fe:	08 95       	ret
 700:	82 30       	cpi	r24, 0x02	; 2
 702:	91 05       	cpc	r25, r1
 704:	d9 f0       	breq	.+54     	; 0x73c <setPinData+0xc0>
 706:	03 97       	sbiw	r24, 0x03	; 3
 708:	29 f1       	breq	.+74     	; 0x754 <setPinData+0xd8>
 70a:	08 95       	ret
        {
            case _PA:
                PORTA &= ~(1 << pinNum);
 70c:	2b b3       	in	r18, 0x1b	; 27
 70e:	81 e0       	ldi	r24, 0x01	; 1
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	02 c0       	rjmp	.+4      	; 0x718 <setPinData+0x9c>
 714:	88 0f       	add	r24, r24
 716:	99 1f       	adc	r25, r25
 718:	6a 95       	dec	r22
 71a:	e2 f7       	brpl	.-8      	; 0x714 <setPinData+0x98>
 71c:	80 95       	com	r24
 71e:	82 23       	and	r24, r18
 720:	8b bb       	out	0x1b, r24	; 27
                break;
 722:	08 95       	ret
            case _PB:
                PORTB &= ~(1 << pinNum);
 724:	28 b3       	in	r18, 0x18	; 24
 726:	81 e0       	ldi	r24, 0x01	; 1
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	02 c0       	rjmp	.+4      	; 0x730 <setPinData+0xb4>
 72c:	88 0f       	add	r24, r24
 72e:	99 1f       	adc	r25, r25
 730:	6a 95       	dec	r22
 732:	e2 f7       	brpl	.-8      	; 0x72c <setPinData+0xb0>
 734:	80 95       	com	r24
 736:	82 23       	and	r24, r18
 738:	88 bb       	out	0x18, r24	; 24
                break;
 73a:	08 95       	ret
            case _PC:
                PORTC &= ~(1 << pinNum);
 73c:	25 b3       	in	r18, 0x15	; 21
 73e:	81 e0       	ldi	r24, 0x01	; 1
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	02 c0       	rjmp	.+4      	; 0x748 <setPinData+0xcc>
 744:	88 0f       	add	r24, r24
 746:	99 1f       	adc	r25, r25
 748:	6a 95       	dec	r22
 74a:	e2 f7       	brpl	.-8      	; 0x744 <setPinData+0xc8>
 74c:	80 95       	com	r24
 74e:	82 23       	and	r24, r18
 750:	85 bb       	out	0x15, r24	; 21
                break;
 752:	08 95       	ret
            case _PD:
                PORTD &= ~(1 << pinNum);
 754:	22 b3       	in	r18, 0x12	; 18
 756:	81 e0       	ldi	r24, 0x01	; 1
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	02 c0       	rjmp	.+4      	; 0x760 <setPinData+0xe4>
 75c:	88 0f       	add	r24, r24
 75e:	99 1f       	adc	r25, r25
 760:	6a 95       	dec	r22
 762:	e2 f7       	brpl	.-8      	; 0x75c <setPinData+0xe0>
 764:	80 95       	com	r24
 766:	82 23       	and	r24, r18
 768:	82 bb       	out	0x12, r24	; 18
 76a:	08 95       	ret

0000076c <__fixsfsi>:
 76c:	0e 94 bd 03 	call	0x77a	; 0x77a <__fixunssfsi>
 770:	68 94       	set
 772:	b1 11       	cpse	r27, r1
 774:	0c 94 4c 04 	jmp	0x898	; 0x898 <__fp_szero>
 778:	08 95       	ret

0000077a <__fixunssfsi>:
 77a:	0e 94 31 04 	call	0x862	; 0x862 <__fp_splitA>
 77e:	88 f0       	brcs	.+34     	; 0x7a2 <__fixunssfsi+0x28>
 780:	9f 57       	subi	r25, 0x7F	; 127
 782:	98 f0       	brcs	.+38     	; 0x7aa <__fixunssfsi+0x30>
 784:	b9 2f       	mov	r27, r25
 786:	99 27       	eor	r25, r25
 788:	b7 51       	subi	r27, 0x17	; 23
 78a:	b0 f0       	brcs	.+44     	; 0x7b8 <__fixunssfsi+0x3e>
 78c:	e1 f0       	breq	.+56     	; 0x7c6 <__fixunssfsi+0x4c>
 78e:	66 0f       	add	r22, r22
 790:	77 1f       	adc	r23, r23
 792:	88 1f       	adc	r24, r24
 794:	99 1f       	adc	r25, r25
 796:	1a f0       	brmi	.+6      	; 0x79e <__fixunssfsi+0x24>
 798:	ba 95       	dec	r27
 79a:	c9 f7       	brne	.-14     	; 0x78e <__fixunssfsi+0x14>
 79c:	14 c0       	rjmp	.+40     	; 0x7c6 <__fixunssfsi+0x4c>
 79e:	b1 30       	cpi	r27, 0x01	; 1
 7a0:	91 f0       	breq	.+36     	; 0x7c6 <__fixunssfsi+0x4c>
 7a2:	0e 94 4b 04 	call	0x896	; 0x896 <__fp_zero>
 7a6:	b1 e0       	ldi	r27, 0x01	; 1
 7a8:	08 95       	ret
 7aa:	0c 94 4b 04 	jmp	0x896	; 0x896 <__fp_zero>
 7ae:	67 2f       	mov	r22, r23
 7b0:	78 2f       	mov	r23, r24
 7b2:	88 27       	eor	r24, r24
 7b4:	b8 5f       	subi	r27, 0xF8	; 248
 7b6:	39 f0       	breq	.+14     	; 0x7c6 <__fixunssfsi+0x4c>
 7b8:	b9 3f       	cpi	r27, 0xF9	; 249
 7ba:	cc f3       	brlt	.-14     	; 0x7ae <__fixunssfsi+0x34>
 7bc:	86 95       	lsr	r24
 7be:	77 95       	ror	r23
 7c0:	67 95       	ror	r22
 7c2:	b3 95       	inc	r27
 7c4:	d9 f7       	brne	.-10     	; 0x7bc <__fixunssfsi+0x42>
 7c6:	3e f4       	brtc	.+14     	; 0x7d6 <__fixunssfsi+0x5c>
 7c8:	90 95       	com	r25
 7ca:	80 95       	com	r24
 7cc:	70 95       	com	r23
 7ce:	61 95       	neg	r22
 7d0:	7f 4f       	sbci	r23, 0xFF	; 255
 7d2:	8f 4f       	sbci	r24, 0xFF	; 255
 7d4:	9f 4f       	sbci	r25, 0xFF	; 255
 7d6:	08 95       	ret

000007d8 <__floatunsisf>:
 7d8:	e8 94       	clt
 7da:	09 c0       	rjmp	.+18     	; 0x7ee <__floatsisf+0x12>

000007dc <__floatsisf>:
 7dc:	97 fb       	bst	r25, 7
 7de:	3e f4       	brtc	.+14     	; 0x7ee <__floatsisf+0x12>
 7e0:	90 95       	com	r25
 7e2:	80 95       	com	r24
 7e4:	70 95       	com	r23
 7e6:	61 95       	neg	r22
 7e8:	7f 4f       	sbci	r23, 0xFF	; 255
 7ea:	8f 4f       	sbci	r24, 0xFF	; 255
 7ec:	9f 4f       	sbci	r25, 0xFF	; 255
 7ee:	99 23       	and	r25, r25
 7f0:	a9 f0       	breq	.+42     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 7f2:	f9 2f       	mov	r31, r25
 7f4:	96 e9       	ldi	r25, 0x96	; 150
 7f6:	bb 27       	eor	r27, r27
 7f8:	93 95       	inc	r25
 7fa:	f6 95       	lsr	r31
 7fc:	87 95       	ror	r24
 7fe:	77 95       	ror	r23
 800:	67 95       	ror	r22
 802:	b7 95       	ror	r27
 804:	f1 11       	cpse	r31, r1
 806:	f8 cf       	rjmp	.-16     	; 0x7f8 <__floatsisf+0x1c>
 808:	fa f4       	brpl	.+62     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 80a:	bb 0f       	add	r27, r27
 80c:	11 f4       	brne	.+4      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 80e:	60 ff       	sbrs	r22, 0
 810:	1b c0       	rjmp	.+54     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 812:	6f 5f       	subi	r22, 0xFF	; 255
 814:	7f 4f       	sbci	r23, 0xFF	; 255
 816:	8f 4f       	sbci	r24, 0xFF	; 255
 818:	9f 4f       	sbci	r25, 0xFF	; 255
 81a:	16 c0       	rjmp	.+44     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 81c:	88 23       	and	r24, r24
 81e:	11 f0       	breq	.+4      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 820:	96 e9       	ldi	r25, 0x96	; 150
 822:	11 c0       	rjmp	.+34     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 824:	77 23       	and	r23, r23
 826:	21 f0       	breq	.+8      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 828:	9e e8       	ldi	r25, 0x8E	; 142
 82a:	87 2f       	mov	r24, r23
 82c:	76 2f       	mov	r23, r22
 82e:	05 c0       	rjmp	.+10     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 830:	66 23       	and	r22, r22
 832:	71 f0       	breq	.+28     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 834:	96 e8       	ldi	r25, 0x86	; 134
 836:	86 2f       	mov	r24, r22
 838:	70 e0       	ldi	r23, 0x00	; 0
 83a:	60 e0       	ldi	r22, 0x00	; 0
 83c:	2a f0       	brmi	.+10     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 83e:	9a 95       	dec	r25
 840:	66 0f       	add	r22, r22
 842:	77 1f       	adc	r23, r23
 844:	88 1f       	adc	r24, r24
 846:	da f7       	brpl	.-10     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 848:	88 0f       	add	r24, r24
 84a:	96 95       	lsr	r25
 84c:	87 95       	ror	r24
 84e:	97 f9       	bld	r25, 7
 850:	08 95       	ret

00000852 <__fp_split3>:
 852:	57 fd       	sbrc	r21, 7
 854:	90 58       	subi	r25, 0x80	; 128
 856:	44 0f       	add	r20, r20
 858:	55 1f       	adc	r21, r21
 85a:	59 f0       	breq	.+22     	; 0x872 <__fp_splitA+0x10>
 85c:	5f 3f       	cpi	r21, 0xFF	; 255
 85e:	71 f0       	breq	.+28     	; 0x87c <__fp_splitA+0x1a>
 860:	47 95       	ror	r20

00000862 <__fp_splitA>:
 862:	88 0f       	add	r24, r24
 864:	97 fb       	bst	r25, 7
 866:	99 1f       	adc	r25, r25
 868:	61 f0       	breq	.+24     	; 0x882 <__fp_splitA+0x20>
 86a:	9f 3f       	cpi	r25, 0xFF	; 255
 86c:	79 f0       	breq	.+30     	; 0x88c <__fp_splitA+0x2a>
 86e:	87 95       	ror	r24
 870:	08 95       	ret
 872:	12 16       	cp	r1, r18
 874:	13 06       	cpc	r1, r19
 876:	14 06       	cpc	r1, r20
 878:	55 1f       	adc	r21, r21
 87a:	f2 cf       	rjmp	.-28     	; 0x860 <__stack+0x1>
 87c:	46 95       	lsr	r20
 87e:	f1 df       	rcall	.-30     	; 0x862 <__fp_splitA>
 880:	08 c0       	rjmp	.+16     	; 0x892 <__fp_splitA+0x30>
 882:	16 16       	cp	r1, r22
 884:	17 06       	cpc	r1, r23
 886:	18 06       	cpc	r1, r24
 888:	99 1f       	adc	r25, r25
 88a:	f1 cf       	rjmp	.-30     	; 0x86e <__fp_splitA+0xc>
 88c:	86 95       	lsr	r24
 88e:	71 05       	cpc	r23, r1
 890:	61 05       	cpc	r22, r1
 892:	08 94       	sec
 894:	08 95       	ret

00000896 <__fp_zero>:
 896:	e8 94       	clt

00000898 <__fp_szero>:
 898:	bb 27       	eor	r27, r27
 89a:	66 27       	eor	r22, r22
 89c:	77 27       	eor	r23, r23
 89e:	cb 01       	movw	r24, r22
 8a0:	97 f9       	bld	r25, 7
 8a2:	08 95       	ret

000008a4 <__mulsf3>:
 8a4:	0e 94 65 04 	call	0x8ca	; 0x8ca <__mulsf3x>
 8a8:	0c 94 d6 04 	jmp	0x9ac	; 0x9ac <__fp_round>
 8ac:	0e 94 c8 04 	call	0x990	; 0x990 <__fp_pscA>
 8b0:	38 f0       	brcs	.+14     	; 0x8c0 <__mulsf3+0x1c>
 8b2:	0e 94 cf 04 	call	0x99e	; 0x99e <__fp_pscB>
 8b6:	20 f0       	brcs	.+8      	; 0x8c0 <__mulsf3+0x1c>
 8b8:	95 23       	and	r25, r21
 8ba:	11 f0       	breq	.+4      	; 0x8c0 <__mulsf3+0x1c>
 8bc:	0c 94 bf 04 	jmp	0x97e	; 0x97e <__fp_inf>
 8c0:	0c 94 c5 04 	jmp	0x98a	; 0x98a <__fp_nan>
 8c4:	11 24       	eor	r1, r1
 8c6:	0c 94 4c 04 	jmp	0x898	; 0x898 <__fp_szero>

000008ca <__mulsf3x>:
 8ca:	0e 94 29 04 	call	0x852	; 0x852 <__fp_split3>
 8ce:	70 f3       	brcs	.-36     	; 0x8ac <__mulsf3+0x8>

000008d0 <__mulsf3_pse>:
 8d0:	95 9f       	mul	r25, r21
 8d2:	c1 f3       	breq	.-16     	; 0x8c4 <__mulsf3+0x20>
 8d4:	95 0f       	add	r25, r21
 8d6:	50 e0       	ldi	r21, 0x00	; 0
 8d8:	55 1f       	adc	r21, r21
 8da:	62 9f       	mul	r22, r18
 8dc:	f0 01       	movw	r30, r0
 8de:	72 9f       	mul	r23, r18
 8e0:	bb 27       	eor	r27, r27
 8e2:	f0 0d       	add	r31, r0
 8e4:	b1 1d       	adc	r27, r1
 8e6:	63 9f       	mul	r22, r19
 8e8:	aa 27       	eor	r26, r26
 8ea:	f0 0d       	add	r31, r0
 8ec:	b1 1d       	adc	r27, r1
 8ee:	aa 1f       	adc	r26, r26
 8f0:	64 9f       	mul	r22, r20
 8f2:	66 27       	eor	r22, r22
 8f4:	b0 0d       	add	r27, r0
 8f6:	a1 1d       	adc	r26, r1
 8f8:	66 1f       	adc	r22, r22
 8fa:	82 9f       	mul	r24, r18
 8fc:	22 27       	eor	r18, r18
 8fe:	b0 0d       	add	r27, r0
 900:	a1 1d       	adc	r26, r1
 902:	62 1f       	adc	r22, r18
 904:	73 9f       	mul	r23, r19
 906:	b0 0d       	add	r27, r0
 908:	a1 1d       	adc	r26, r1
 90a:	62 1f       	adc	r22, r18
 90c:	83 9f       	mul	r24, r19
 90e:	a0 0d       	add	r26, r0
 910:	61 1d       	adc	r22, r1
 912:	22 1f       	adc	r18, r18
 914:	74 9f       	mul	r23, r20
 916:	33 27       	eor	r19, r19
 918:	a0 0d       	add	r26, r0
 91a:	61 1d       	adc	r22, r1
 91c:	23 1f       	adc	r18, r19
 91e:	84 9f       	mul	r24, r20
 920:	60 0d       	add	r22, r0
 922:	21 1d       	adc	r18, r1
 924:	82 2f       	mov	r24, r18
 926:	76 2f       	mov	r23, r22
 928:	6a 2f       	mov	r22, r26
 92a:	11 24       	eor	r1, r1
 92c:	9f 57       	subi	r25, 0x7F	; 127
 92e:	50 40       	sbci	r21, 0x00	; 0
 930:	9a f0       	brmi	.+38     	; 0x958 <__mulsf3_pse+0x88>
 932:	f1 f0       	breq	.+60     	; 0x970 <__mulsf3_pse+0xa0>
 934:	88 23       	and	r24, r24
 936:	4a f0       	brmi	.+18     	; 0x94a <__mulsf3_pse+0x7a>
 938:	ee 0f       	add	r30, r30
 93a:	ff 1f       	adc	r31, r31
 93c:	bb 1f       	adc	r27, r27
 93e:	66 1f       	adc	r22, r22
 940:	77 1f       	adc	r23, r23
 942:	88 1f       	adc	r24, r24
 944:	91 50       	subi	r25, 0x01	; 1
 946:	50 40       	sbci	r21, 0x00	; 0
 948:	a9 f7       	brne	.-22     	; 0x934 <__mulsf3_pse+0x64>
 94a:	9e 3f       	cpi	r25, 0xFE	; 254
 94c:	51 05       	cpc	r21, r1
 94e:	80 f0       	brcs	.+32     	; 0x970 <__mulsf3_pse+0xa0>
 950:	0c 94 bf 04 	jmp	0x97e	; 0x97e <__fp_inf>
 954:	0c 94 4c 04 	jmp	0x898	; 0x898 <__fp_szero>
 958:	5f 3f       	cpi	r21, 0xFF	; 255
 95a:	e4 f3       	brlt	.-8      	; 0x954 <__mulsf3_pse+0x84>
 95c:	98 3e       	cpi	r25, 0xE8	; 232
 95e:	d4 f3       	brlt	.-12     	; 0x954 <__mulsf3_pse+0x84>
 960:	86 95       	lsr	r24
 962:	77 95       	ror	r23
 964:	67 95       	ror	r22
 966:	b7 95       	ror	r27
 968:	f7 95       	ror	r31
 96a:	e7 95       	ror	r30
 96c:	9f 5f       	subi	r25, 0xFF	; 255
 96e:	c1 f7       	brne	.-16     	; 0x960 <__mulsf3_pse+0x90>
 970:	fe 2b       	or	r31, r30
 972:	88 0f       	add	r24, r24
 974:	91 1d       	adc	r25, r1
 976:	96 95       	lsr	r25
 978:	87 95       	ror	r24
 97a:	97 f9       	bld	r25, 7
 97c:	08 95       	ret

0000097e <__fp_inf>:
 97e:	97 f9       	bld	r25, 7
 980:	9f 67       	ori	r25, 0x7F	; 127
 982:	80 e8       	ldi	r24, 0x80	; 128
 984:	70 e0       	ldi	r23, 0x00	; 0
 986:	60 e0       	ldi	r22, 0x00	; 0
 988:	08 95       	ret

0000098a <__fp_nan>:
 98a:	9f ef       	ldi	r25, 0xFF	; 255
 98c:	80 ec       	ldi	r24, 0xC0	; 192
 98e:	08 95       	ret

00000990 <__fp_pscA>:
 990:	00 24       	eor	r0, r0
 992:	0a 94       	dec	r0
 994:	16 16       	cp	r1, r22
 996:	17 06       	cpc	r1, r23
 998:	18 06       	cpc	r1, r24
 99a:	09 06       	cpc	r0, r25
 99c:	08 95       	ret

0000099e <__fp_pscB>:
 99e:	00 24       	eor	r0, r0
 9a0:	0a 94       	dec	r0
 9a2:	12 16       	cp	r1, r18
 9a4:	13 06       	cpc	r1, r19
 9a6:	14 06       	cpc	r1, r20
 9a8:	05 06       	cpc	r0, r21
 9aa:	08 95       	ret

000009ac <__fp_round>:
 9ac:	09 2e       	mov	r0, r25
 9ae:	03 94       	inc	r0
 9b0:	00 0c       	add	r0, r0
 9b2:	11 f4       	brne	.+4      	; 0x9b8 <__fp_round+0xc>
 9b4:	88 23       	and	r24, r24
 9b6:	52 f0       	brmi	.+20     	; 0x9cc <__fp_round+0x20>
 9b8:	bb 0f       	add	r27, r27
 9ba:	40 f4       	brcc	.+16     	; 0x9cc <__fp_round+0x20>
 9bc:	bf 2b       	or	r27, r31
 9be:	11 f4       	brne	.+4      	; 0x9c4 <__fp_round+0x18>
 9c0:	60 ff       	sbrs	r22, 0
 9c2:	04 c0       	rjmp	.+8      	; 0x9cc <__fp_round+0x20>
 9c4:	6f 5f       	subi	r22, 0xFF	; 255
 9c6:	7f 4f       	sbci	r23, 0xFF	; 255
 9c8:	8f 4f       	sbci	r24, 0xFF	; 255
 9ca:	9f 4f       	sbci	r25, 0xFF	; 255
 9cc:	08 95       	ret

000009ce <_exit>:
 9ce:	f8 94       	cli

000009d0 <__stop_program>:
 9d0:	ff cf       	rjmp	.-2      	; 0x9d0 <__stop_program>
